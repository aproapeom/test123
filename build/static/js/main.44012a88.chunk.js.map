{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["List","props","list","numbers","map","el","i","isBoom","className","Label","console","log","sum","App","useState","setNumbers","reduce","a","b","length","useEffect","document","title","onClick","oldArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oMAGMA,EAAO,SAACC,GAEZ,IAAMC,EAAOD,EAAME,QAAQC,KAAI,SAACC,EAAIC,GAClC,IAAIC,GAAWF,EAAK,IAAM,GAAOA,EAAK,KAAO,IAAc,IAAPA,EAEpD,OAAO,oBAAYG,UAAWD,EAAS,YAAc,KAA9C,SAAqDF,GAA5CC,MAElB,OAAO,6BAAKJ,KAGRO,EAAQ,SAACR,GAEb,OADAS,QAAQC,IAAIV,GACL,uBAAOO,UAAWP,EAAMM,OAAS,OAAS,KAA1C,SAAiDN,EAAMW,OA0BjDC,MAvBf,WAAgB,IAAD,EACiBC,mBAAS,CAAC,IAD3B,mBACNX,EADM,KACGY,EADH,KAEPH,EAAMT,EAAQa,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GACtCX,GAAWK,EAAM,IAAM,GAAOT,EAAQA,EAAQgB,OAAS,GAAK,KAAO,IAAe,IAARP,EAMhF,OALAF,QAAQC,IAAIJ,GACZa,qBAAU,WACCC,SAASC,MAAlBf,EAA0B,OAA0B,cAIpD,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,UAAf,UAAyB,wBAAQe,QAAS,kBACxCR,GAAW,SAAAS,GAAQ,4BAAQA,GAAR,CAAkBA,EAASL,aADvB,sBAGzB,cAAC,EAAD,CAAOP,IAAKA,EAAKL,OAAQA,OAEzB,cAAC,EAAD,CAAMJ,QAASA,EAASS,IAAKA,QCtBpBa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASgB,eAAe,SAM1BZ,M","file":"static/js/main.44012a88.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nconst List = (props) => {\n  \n  const list = props.numbers.map((el, i) => {\n    let isBoom = ((el % 7 === 0) || (el % 10 === 7)) && el !== 0 \n    \n    return <li key={i} className={isBoom ? 'boomColor' : null}>{el}</li>\n  })\n  return <ul>{list}</ul>\n}\n\nconst Label = (props) => {\n  console.log(props)\n  return <label className={props.isBoom ? 'boom' : null}>{props.sum}</label>\n}\n\nfunction App() {\n  const [numbers, setNumbers] = useState([0]);\n  const sum = numbers.reduce((a, b) => a + b, 0)\n  const isBoom = ((sum % 7 === 0) || (numbers[numbers.length - 1] % 10 === 7)) && sum !== 0\n  console.log(isBoom)\n  useEffect(() => {\n    isBoom ? document.title = 'Boom' : document.title = \"Counting\"\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"control\"><button onClick={() =>\n        setNumbers(oldArray => [...oldArray, oldArray.length])\n      }>Increase</button>\n      <Label sum={sum} isBoom={isBoom}/>\n      </div>\n      <List numbers={numbers} sum={sum} />\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}